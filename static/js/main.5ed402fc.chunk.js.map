{"version":3,"sources":["components/Controls/styles.module.scss","components/Main/Grid/styles.module.scss","components/GitHubLink/styles.module.scss","components/Main/DivCells/styles.module.scss","components/Root/styles.module.scss","components/Main/styles.module.scss","components/Main/DivCells/Cell/styles.module.scss","components/Main/CanvasCells/styles.module.scss","redux/modules/controls/actionTypes.js","redux/modules/controls/reducer.js","redux/modules/controls/index.js","redux/modules/cells/actionTypes.js","redux/modules/cells/reducer.js","redux/modules/cells/index.js","redux/modules/index.js","redux/store.js","utils/helpers.js","redux/modules/cells/actions.js","components/GitHubLink/GitHubLink.js","components/Controls/Controls.js","redux/modules/controls/actions.js","components/Main/DivCells/Cell/Cell.js","components/Main/Grid/Grid.js","components/Main/DivCells/DivCells.js","components/Main/CanvasCells/CanvasCells.js","components/Main/Main.js","components/Root/Root.js","index.js","serviceWorker.js"],"names":["module","exports","controls","control","rules","rangeLabel","separator","logo","hint","icon","selectBox","name","grid","appear-grid","line","boldLine","main","octicon","cellsContainer","root","cell","container","UPDATE_CONTROLS","initialState","started","cellSize","localStorage","getItem","speed","randomAreaSize","randomAreaPopulation","renderMode","showGrid","JSON","parse","cleanLevel","stayAliveFrom","stayAliveTo","newLifeFrom","newLifeTo","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","SET_CELLS","ADD_CELL","REMOVE_CELL","cells","x","y","find","_ref","_ref2","slicedToArray","cx","cy","toConsumableArray","concat","filter","_ref3","_ref4","combineReducers","configureStore","middleware","thunk","composedEnhancers","compose","apply","applyMiddleware","createStore","rootReducer","makeKey","aroundCells","ix","iy","push","GitHubLink","react_default","a","createElement","className","styles","href","target","rel","viewBox","version","aria-hidden","fillRule","d","React","Component","Icon","value","label","role","aria-label","Controls","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","handleToggleStart","_this$props","props","updateControls","handleChangeSpeed","e","Number","currentTarget","handleChangeRandomAreaSize","handleChangeRandomAreaPopulation","handleRandomize","randomizeCells","handleChangeCellSize","handleClear","clearCells","handleChangeRenderMode","handleChangeShowGrid","checked","handleChangeCleanLevel","handleChangeStayAliveFrom","handleChangeStayAliveTo","handleChangeNewLifeFrom","handleChangeNewLifeTo","handleResetRules","inherits","createClass","key","Fragment","htmlFor","min","max","onChange","_this$props2","onClick","style","fontWeight","Controls_Icon","renderCanvasOptions","GitHubLink_GitHubLink","connect","ownProps","keys","forEach","setItem","dispatch","getState","_getState$controls2","Math","random","halfSize","round","rx","ry","Cell","width","height","left","top","Grid","lines","i","x1","y1","x2","y2","cn","defineProperty","transform","renderLines","DivCells","map","_cell","DivCells_Cell_Cell","renderCells","Main_Grid_Grid","CanvasCells","ctx","canvasRef","getContext","ctx2","canvasTempRef","shadowBlur","clearRect","globalAlpha","drawImage","centerWidth","floor","centerHeight","shadowColor","fillStyle","fillRect","prevProps","prevState","snapshot","ref","display","DRAW_MODES","NONE","DRAW","CLEAR","Main","drawMode","handleMouseOver","clientX","clientY","addCell","removeCell","containerRef","offsetLeft","offsetWidth","ceil","offsetTop","offsetHeight","handleMouseDown","button","setState","handleStopDrawing","handleContextMenu","preventDefault","repeater","updateDelay","start","stop","evaluateCells","repeat","delay","dist_index_esm","Main_DivCells_DivCells","Main_CanvasCells_CanvasCells","_this2","onMouseMove","onMouseDown","onMouseUp","onMouseLeave","onContextMenu","renderContent","_getState$controls","calculateCells","filled","resultCells","_loop","_calculateCells$key","countFilledAround","_ref5","_ref6","Root","store","react_redux_es","components_Controls_Controls","components_Main_Main","document","querySelector","ReactDOM","render","Root_Root","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ed402fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"styles_controls__2I_UW\",\"control\":\"styles_control__ft17w\",\"rules\":\"styles_rules__3i_N4\",\"rangeLabel\":\"styles_rangeLabel__R1K7c\",\"separator\":\"styles_separator__1CHBC\",\"logo\":\"styles_logo__jbCYq\",\"hint\":\"styles_hint__1ravt\",\"icon\":\"styles_icon__3dsNZ\",\"selectBox\":\"styles_selectBox__32qze\",\"name\":\"styles_name__6OAoL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"styles_grid__3qgCG\",\"appear-grid\":\"styles_appear-grid__38TWS\",\"line\":\"styles_line__3QYq8\",\"boldLine\":\"styles_boldLine__1JnQG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__v2TEg\",\"octicon\":\"styles_octicon__24El-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cellsContainer\":\"styles_cellsContainer__YDb3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__1It74\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__W22xA\",\"cellsContainer\":\"styles_cellsContainer__njXVz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"styles_cell__1oTgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__11Dt2\"};","export const UPDATE_CONTROLS = 'app/controls/UPDATE_CONTROLS';\n","import { UPDATE_CONTROLS } from './actionTypes';\n\nconst initialState = {\n    started: false,\n    cellSize: +(localStorage.getItem(`life:cellSize`) || 10),\n    speed: +(localStorage.getItem(`life:speed`) || 50),\n    randomAreaSize: +(localStorage.getItem(`life:randomAreaSize`) || 20),\n    randomAreaPopulation: +(localStorage.getItem(`life:randomAreaPopulation`) || 5),\n    renderMode: localStorage.getItem(`life:renderMode`) || 'canvas',\n    showGrid: JSON.parse(localStorage.getItem(`life:showGrid`)) || false,\n    cleanLevel: +(localStorage.getItem(`life:cleanLevel`) || 100),\n    stayAliveFrom: +(localStorage.getItem(`life:stayAliveFrom`) || 2),\n    stayAliveTo: +(localStorage.getItem(`life:stayAliveTo`) || 3),\n    newLifeFrom: +(localStorage.getItem(`life:newLifeFrom`) || 3),\n    newLifeTo: +(localStorage.getItem(`life:newLifeTo`) || 3),\n};\n\nexport default function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case UPDATE_CONTROLS: {\n            const { controls } = action;\n            return { ...state, ...controls };\n        }\n        default:\n            return state;\n    }\n}\n","import reducer from './reducer';\n\nexport default reducer;\n","export const SET_CELLS = 'app/cells/SET_CELLS';\nexport const ADD_CELL = 'app/cells/ADD_CELL';\nexport const REMOVE_CELL = 'app/cells/REMOVE_CELL';\n","import { SET_CELLS, ADD_CELL, REMOVE_CELL } from './actionTypes';\n\nconst initialState = [[1, 2], [2, 1], [2, 0], [1, 0], [0, 0]];\n\nexport default function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case SET_CELLS: {\n            const { cells } = action;\n            return cells;\n        }\n        case ADD_CELL: {\n            const { x, y } = action;\n\n            if (!state.find(([cx, cy]) => cx === x && cy === y)) {\n                return [...state, [x, y]];\n            }\n            return state;\n        }\n        case REMOVE_CELL: {\n            const { x, y } = action;\n\n            state = [...state];\n            return state.filter(([cx, cy]) => !(cx === x && cy === y));\n        }\n        default:\n            return state;\n    }\n}\n","import reducer from './reducer';\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport controls from './controls';\nimport cells from './cells';\n\nexport default combineReducers({\n    controls,\n    cells,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './modules';\n\nconst configureStore = () => {\n    const initialState = {};\n    const enhancers = [];\n    const middleware = [thunk];\n\n    if (process.env.NODE_ENV !== 'production') {\n        const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n        if (typeof devToolsExtension === 'function') {\n            enhancers.push(devToolsExtension());\n        }\n    }\n\n    const composedEnhancers = compose(\n        applyMiddleware(...middleware),\n        ...enhancers,\n    );\n\n    const store = createStore(rootReducer, initialState, composedEnhancers);\n\n    if (process.env.NODE_ENV !== 'production') {\n        if (module.hot) {\n            module.hot.accept('./modules', () => {\n                store.replaceReducer(rootReducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nexport default configureStore;\n","export function makeKey(x, y) {\n    return `${x}_${y}`;\n}\n","import { ADD_CELL, REMOVE_CELL, SET_CELLS } from './actionTypes';\nimport { makeKey } from '../../../utils/helpers';\n\nconst aroundCells = [];\nfor (let ix = -1; ix <= 1; ix += 1) {\n    for (let iy = -1; iy <= 1; iy += 1) {\n        if (!(ix === 0 && iy === 0)) {\n            aroundCells.push([ix, iy]);\n        }\n    }\n}\n\nexport function evaluateCells() {\n    // eslint-disable-next-line sonarjs/cognitive-complexity\n    return (dispatch, getState) => {\n        const { cells } = getState();\n\n        const { stayAliveFrom, stayAliveTo, newLifeFrom, newLifeTo } = getState().controls;\n\n        // Grab all cells for calculation\n        const calculateCells = {};\n        cells.forEach(cell => {\n            const [x, y] = cell;\n            const key = makeKey(x, y);\n\n            calculateCells[key] = {\n                filled: 1,\n                x,\n                y,\n            };\n\n            aroundCells.forEach(([ix, iy]) => {\n                const rx = x + ix;\n                const ry = y + iy;\n\n                const key = makeKey(rx, ry);\n                if (!calculateCells[key] || !calculateCells[key].filled) {\n                    calculateCells[key] = {\n                        filled: 0,\n                        x: rx,\n                        y: ry,\n                    };\n                }\n            });\n        });\n\n        // Calculate new cells\n        const resultCells = [];\n\n        // eslint-disable-next-line guard-for-in\n        for (const key in calculateCells) {\n            const { filled, x, y } = calculateCells[key];\n\n            let countFilledAround = 0;\n\n            // Count around filled cells\n            aroundCells.forEach(([ix, iy]) => {\n                const rx = x + ix;\n                const ry = y + iy;\n\n                const key = makeKey(rx, ry);\n                if (calculateCells[key] && calculateCells[key].filled) {\n                    countFilledAround += 1;\n                }\n            });\n\n            if (filled && (countFilledAround >= stayAliveFrom && countFilledAround <= stayAliveTo)) {\n                // Just stay alive\n                resultCells.push([x, y]);\n            } else if (!filled && countFilledAround >= newLifeFrom && countFilledAround <= newLifeTo) {\n                // New life\n                resultCells.push([x, y]);\n            }\n\n            // Else if Overpopulation or Loneliness - die!\n        }\n\n        dispatch({\n            type: SET_CELLS,\n            cells: resultCells,\n        });\n    };\n}\n\nexport function setCells(cells) {\n    return {\n        type: SET_CELLS,\n        cells,\n    };\n}\n\nexport function clearCells() {\n    return {\n        type: SET_CELLS,\n        cells: [],\n    };\n}\n\nexport function randomizeCells() {\n    return (dispatch, getState) => {\n        const { randomAreaSize, randomAreaPopulation } = getState().controls;\n\n        const cells = [];\n        for (let x = 0; x < randomAreaSize; x += 1) {\n            for (let y = 0; y < randomAreaSize; y += 1) {\n                if (Math.random() < randomAreaPopulation / 10) {\n                    const halfSize = Math.round(randomAreaSize / 2);\n                    const rx = x - halfSize;\n                    const ry = y - halfSize;\n                    cells.push([rx, ry]);\n                }\n            }\n        }\n\n        dispatch({\n            type: SET_CELLS,\n            cells,\n        });\n    };\n}\n\nexport function addCell({ x, y }) {\n    return {\n        type: ADD_CELL,\n        x,\n        y,\n    };\n}\n\nexport function removeCell({ x, y }) {\n    return {\n        type: REMOVE_CELL,\n        x,\n        y,\n    };\n}\n","/* eslint-disable max-len */\nimport React from 'react';\nimport styles from './styles.module.scss';\n\nexport default class GitHubLink extends React.Component {\n    render() {\n        return (\n            <div className={styles.main}>\n                <a href=\"https://github.com/avin/react-game-life\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <svg className={styles.octicon} viewBox=\"0 0 16 16\" version=\"1.1\" aria-hidden=\"true\">\n                        <path\n                            fillRule=\"evenodd\"\n                            d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"\n                        />\n                    </svg>\n                </a>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './styles.module.scss';\nimport { updateControls } from '../../redux/modules/controls/actions';\nimport { clearCells, randomizeCells } from '../../redux/modules/cells/actions';\nimport GitHubLink from '../GitHubLink/GitHubLink';\n\nconst Icon = ({ value, label }) => (\n    <span role=\"img\" aria-label={label} className={styles.icon}>\n        {value}\n    </span>\n);\n\nexport class Controls extends React.Component {\n    handleToggleStart = () => {\n        const { started, updateControls } = this.props;\n        updateControls({ started: !started });\n    };\n\n    handleChangeSpeed = e => {\n        const { updateControls } = this.props;\n        updateControls({ speed: 500 - Number(e.currentTarget.value) });\n    };\n\n    handleChangeRandomAreaSize = e => {\n        const { updateControls } = this.props;\n        updateControls({ randomAreaSize: Number(e.currentTarget.value) });\n    };\n\n    handleChangeRandomAreaPopulation = e => {\n        const { updateControls } = this.props;\n        updateControls({ randomAreaPopulation: Number(e.currentTarget.value) });\n    };\n\n    handleRandomize = () => {\n        const { randomizeCells } = this.props;\n        randomizeCells();\n    };\n\n    handleChangeCellSize = e => {\n        const { updateControls } = this.props;\n        updateControls({ cellSize: Number(e.currentTarget.value) });\n    };\n\n    handleClear = e => {\n        const { clearCells } = this.props;\n        clearCells();\n    };\n\n    handleChangeRenderMode = e => {\n        const { updateControls } = this.props;\n        updateControls({ renderMode: e.currentTarget.value });\n    };\n\n    handleChangeShowGrid = e => {\n        const { updateControls } = this.props;\n        updateControls({ showGrid: e.currentTarget.checked });\n    };\n\n    handleChangeCleanLevel = e => {\n        const { updateControls } = this.props;\n        updateControls({ cleanLevel: Number(e.currentTarget.value) });\n    };\n\n    renderCanvasOptions() {\n        const { cleanLevel } = this.props;\n        return (\n            <>\n                <div className={styles.control}>\n                    <label htmlFor=\"cleanLevel\" className={styles.rangeLabel}>\n                        Clean level:\n                    </label>\n                    <input\n                        type=\"range\"\n                        name=\"cleanLevel\"\n                        min=\"0\"\n                        max=\"100\"\n                        onChange={this.handleChangeCleanLevel}\n                        value={cleanLevel}\n                    />\n                </div>\n            </>\n        );\n    }\n\n    handleChangeStayAliveFrom = e => {\n        const { updateControls } = this.props;\n        updateControls({ stayAliveFrom: Number(e.currentTarget.value) || 0 });\n    };\n\n    handleChangeStayAliveTo = e => {\n        const { updateControls } = this.props;\n        updateControls({ stayAliveTo: Number(e.currentTarget.value) || 0 });\n    };\n\n    handleChangeNewLifeFrom = e => {\n        const { updateControls } = this.props;\n        updateControls({ newLifeFrom: Number(e.currentTarget.value) || 0 });\n    };\n\n    handleChangeNewLifeTo = e => {\n        const { updateControls } = this.props;\n        updateControls({ newLifeTo: Number(e.currentTarget.value) || 0 });\n    };\n\n    handleResetRules = () => {\n        const { updateControls } = this.props;\n        updateControls({\n            stayAliveFrom: 2,\n            stayAliveTo: 3,\n            newLifeFrom: 3,\n            newLifeTo: 3,\n        });\n    };\n\n    render() {\n        const {\n            started,\n            speed,\n            randomAreaSize,\n            randomAreaPopulation,\n            cellSize,\n            renderMode,\n            showGrid,\n            stayAliveFrom,\n            stayAliveTo,\n            newLifeFrom,\n            newLifeTo,\n        } = this.props;\n\n        return (\n            <div className={styles.controls}>\n                <div className={styles.logo}>The Game of Life</div>\n\n                <div className={styles.separator} />\n\n                <div className={styles.control}>\n                    <button onClick={this.handleToggleStart} style={{ fontWeight: 'bold' }}>\n                        {started ? <span>&#10073;&#10073; Pause</span> : <span>&#9658; Play</span>}\n                    </button>\n                </div>\n\n                <div className={styles.control}>\n                    <label htmlFor=\"speedControl\" className={styles.rangeLabel}>\n                        Speed:\n                    </label>\n                    <input\n                        type=\"range\"\n                        name=\"speedControl\"\n                        min=\"1\"\n                        max=\"500\"\n                        onChange={this.handleChangeSpeed}\n                        value={500 - speed}\n                    />\n                </div>\n\n                <div className={styles.control}>\n                    <label htmlFor=\"speedControl\" className={styles.rangeLabel}>\n                        Cell size:\n                    </label>\n                    <input\n                        type=\"range\"\n                        name=\"cellSize\"\n                        min=\"2\"\n                        max=\"50\"\n                        onChange={this.handleChangeCellSize}\n                        value={cellSize}\n                    />\n                </div>\n\n                <div className={styles.control}>\n                    <label htmlFor=\"showGrid\" className={styles.rangeLabel}>\n                        Show grid:\n                    </label>\n                    <input type=\"checkbox\" name=\"showGrid\" onChange={this.handleChangeShowGrid} checked={showGrid} />\n                </div>\n\n                <div className={styles.separator} />\n\n                <div className={styles.rules}>\n                    <div>\n                        <span className={styles.name}>Stay alive:</span>\n                        <b>&gt;=&nbsp;</b>\n                        <input\n                            type=\"input\"\n                            name=\"stayAliveFrom\"\n                            value={stayAliveFrom}\n                            onChange={this.handleChangeStayAliveFrom}\n                        />\n                        &nbsp;\n                        <b>&lt;=&nbsp;</b>\n                        <input\n                            type=\"input\"\n                            name=\"stayAliveTo\"\n                            value={stayAliveTo}\n                            onChange={this.handleChangeStayAliveTo}\n                        />\n                    </div>\n                </div>\n\n                <div className={styles.rules}>\n                    <div>\n                        <span className={styles.name}>New life:</span>\n                        <b>&gt;=&nbsp;</b>\n                        <input\n                            type=\"input\"\n                            name=\"newLifeFrom\"\n                            value={newLifeFrom}\n                            onChange={this.handleChangeNewLifeFrom}\n                        />\n                        &nbsp;\n                        <b>&lt;=&nbsp;</b>\n                        <input type=\"input\" name=\"newLifeTo\" value={newLifeTo} onChange={this.handleChangeNewLifeTo} />\n                    </div>\n                </div>\n\n                <div className={styles.control}>\n                    <button onClick={this.handleResetRules}>Reset rules</button>\n                </div>\n\n                <div className={styles.separator} />\n\n                <div className={styles.control}>\n                    <label htmlFor=\"randomAreaSize\" className={styles.rangeLabel}>\n                        Random area size:\n                    </label>\n                    <input\n                        type=\"range\"\n                        name=\"randomAreaSize\"\n                        min=\"10\"\n                        max=\"100\"\n                        onChange={this.handleChangeRandomAreaSize}\n                        value={randomAreaSize}\n                    />\n                </div>\n\n                <div className={styles.control}>\n                    <label htmlFor=\"randomAreaPopulation\" className={styles.rangeLabel}>\n                        Random area population:\n                    </label>\n                    <input\n                        type=\"range\"\n                        name=\"randomAreaPopulation\"\n                        min=\"1\"\n                        max=\"9\"\n                        onChange={this.handleChangeRandomAreaPopulation}\n                        value={randomAreaPopulation}\n                    />\n                </div>\n\n                <div className={styles.control}>\n                    <button onClick={this.handleRandomize}>Randomize</button>\n                </div>\n\n                <div className={styles.separator} />\n\n                <div className={styles.hint}>\n                    <Icon label=\"Hint\" value=\"💡\" />\n                    You can draw cells by the left mouse button and clean by the right one.\n                </div>\n\n                <div className={styles.control}>\n                    <button onClick={this.handleClear}>Clear</button>\n                </div>\n\n                <div className={styles.separator} />\n\n                <div className={styles.control}>\n                    <label htmlFor=\"renderMode\" className={styles.rangeLabel}>\n                        Render mode:\n                    </label>\n\n                    <select\n                        name=\"renderMode\"\n                        className={styles.selectBox}\n                        onChange={this.handleChangeRenderMode}\n                        value={renderMode}\n                    >\n                        <option value=\"html\">HTML (Pure React)</option>\n                        <option value=\"canvas\">Canvas (Most performance)</option>\n                    </select>\n                </div>\n\n                {renderMode === 'canvas' && this.renderCanvasOptions()}\n\n                <div className=\"filler\" />\n                <GitHubLink />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        started: state.controls.started,\n        renderMode: state.controls.renderMode,\n        speed: state.controls.speed,\n        cellSize: state.controls.cellSize,\n        showGrid: state.controls.showGrid,\n        randomAreaSize: state.controls.randomAreaSize,\n        cleanLevel: state.controls.cleanLevel,\n\n        stayAliveFrom: state.controls.stayAliveFrom,\n        stayAliveTo: state.controls.stayAliveTo,\n        newLifeFrom: state.controls.newLifeFrom,\n        newLifeTo: state.controls.newLifeTo,\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {\n        updateControls,\n        randomizeCells,\n        clearCells,\n    },\n)(Controls);\n","import { UPDATE_CONTROLS } from './actionTypes';\n\nexport function updateControls(controls) {\n    Object.keys(controls).forEach(key => {\n        localStorage.setItem(`life:${key}`, controls[key]);\n    });\n\n    return {\n        type: UPDATE_CONTROLS,\n        controls,\n    };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './styles.module.scss';\n\nexport class Cell extends React.Component {\n    render() {\n        const { cellSize, x, y } = this.props;\n        return (\n            <div\n                className={styles.cell}\n                style={{ width: cellSize, height: cellSize, left: x * cellSize, top: -y * cellSize }}\n            />\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        cellSize: state.controls.cellSize,\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(Cell);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport cn from 'clsx';\nimport styles from './styles.module.scss';\n\nexport class Grid extends React.Component {\n    renderLines() {\n        const { width, height, cellSize } = this.props;\n\n        const lines = [];\n        for (let i = 0; i < width / 2; i += cellSize) {\n            lines.push(\n                <line\n                    key={`v_${i}`}\n                    x1={i - 0.5}\n                    y1={-height / 2}\n                    x2={i - 0.5}\n                    y2={height / 2}\n                    className={cn(styles.line, { [styles.boldLine]: !(i % (5 * cellSize)) })}\n                />,\n            );\n            i &&\n                lines.push(\n                    <line\n                        key={`v_${-i}`}\n                        x1={-i - 0.5}\n                        y1={-height / 2}\n                        x2={-i - 0.5}\n                        y2={height / 2}\n                        className={cn(styles.line, { [styles.boldLine]: !(i % (5 * cellSize)) })}\n                    />,\n                );\n        }\n        for (let i = 0; i < height / 2; i += cellSize) {\n            lines.push(\n                <line\n                    key={`h_${i}`}\n                    y1={i - 0.5}\n                    x1={-width / 2}\n                    y2={i - 0.5}\n                    x2={width / 2}\n                    className={cn(styles.line, { [styles.boldLine]: !(i % (5 * cellSize)) })}\n                />,\n            );\n            i &&\n                lines.push(\n                    <line\n                        key={`h_${-i}`}\n                        y1={-i - 0.5}\n                        x1={-width / 2}\n                        y2={-i - 0.5}\n                        x2={width / 2}\n                        className={cn(styles.line, { [styles.boldLine]: !(i % (5 * cellSize)) })}\n                    />,\n                );\n        }\n\n        return lines;\n    }\n\n    render() {\n        const { width, height, showGrid } = this.props;\n\n        if (!showGrid) {\n            return null;\n        }\n\n        return (\n            <svg width={width} height={height} className={styles.grid}>\n                <g transform={`matrix(1 0 0 -1 ${width / 2} ${height / 2})`}>{this.renderLines()}</g>\n            </svg>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        cellSize: state.controls.cellSize,\n        showGrid: state.controls.showGrid,\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(Grid);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './styles.module.scss';\nimport Cell from './Cell/Cell';\nimport { makeKey } from '../../../utils/helpers';\nimport Grid from '../Grid/Grid';\n\nexport class DivCells extends React.Component {\n    renderCells() {\n        const { cells } = this.props;\n\n        return cells.map(cell => {\n            const [x, y] = cell;\n            return <Cell key={makeKey(x, y)} x={x} y={y} />;\n        });\n    }\n\n    render() {\n        const { width, height } = this.props;\n\n        return (\n            <div className={styles.container}>\n                <div className={styles.cellsContainer}>{this.renderCells()}</div>\n                <Grid width={width} height={height} />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        cells: state.cells,\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(DivCells);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './styles.module.scss';\nimport Grid from '../Grid/Grid';\n\nexport class CanvasCells extends React.Component {\n    renderCells() {\n        const { cells, cellSize, width, height, cleanLevel } = this.props;\n        const ctx = this.canvasRef.getContext('2d');\n        const ctx2 = this.canvasTempRef.getContext('2d');\n\n        ctx.shadowBlur = 0;\n\n        if (width && height) {\n            ctx2.clearRect(0, 0, width, height);\n            ctx2.globalAlpha = (100 - cleanLevel) / 100;\n            ctx2.drawImage(this.canvasRef, 0, 0);\n            ctx.clearRect(0, 0, width, height);\n            ctx.drawImage(this.canvasTempRef, 0, 0);\n        }\n\n        const centerWidth = Math.floor(width / 2);\n        const centerHeight = Math.floor(height / 2);\n\n        ctx.shadowColor = '#394b59';\n        ctx.shadowBlur = 5;\n        ctx.fillStyle = '#394b59';\n\n        cells.forEach(([x, y]) => {\n            ctx.fillRect(x * cellSize + centerWidth, -y * cellSize + centerHeight, cellSize, cellSize);\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.renderCells();\n    }\n\n    componentDidMount() {\n        // const {width, height} = this.props;\n        // const ctx = this.canvasRef.getContext('2d');\n        // ctx.clearRect(0, 0, width, height);\n\n        this.renderCells();\n    }\n\n    render() {\n        const { width, height } = this.props;\n        return (\n            <div className={styles.container}>\n                <canvas\n                    width={width}\n                    height={height}\n                    ref={i => {\n                        this.canvasRef = i;\n                    }}\n                />\n                <canvas\n                    width={width}\n                    height={height}\n                    ref={i => {\n                        this.canvasTempRef = i;\n                    }}\n                    style={{ display: 'none' }}\n                />\n                <Grid width={width} height={height} />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        cells: state.cells,\n        cellSize: state.controls.cellSize,\n        cleanLevel: state.controls.cleanLevel,\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(CanvasCells);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport repeat from '@avinlab/repeat';\nimport SizeMe from '@avinlab/react-size-me';\nimport styles from './styles.module.scss';\nimport { addCell, evaluateCells, removeCell } from '../../redux/modules/cells/actions';\nimport DivCells from './DivCells/DivCells';\nimport CanvasCells from './CanvasCells/CanvasCells';\n\nconst DRAW_MODES = {\n    NONE: 0,\n    DRAW: 1,\n    CLEAR: 2,\n};\n\nexport class Main extends React.Component {\n    state = {\n        drawMode: DRAW_MODES.NONE,\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.speed !== this.props.speed) {\n            this.repeater.updateDelay(this.props.speed);\n        }\n\n        if (!prevProps.started && this.props.started) {\n            this.repeater.start();\n        } else if (prevProps.started && !this.props.started) {\n            this.repeater.stop();\n        }\n    }\n\n    componentDidMount() {\n        const { evaluateCells, speed } = this.props;\n\n        this.repeater = repeat({\n            action: evaluateCells,\n            delay: speed,\n        });\n    }\n\n    componentWillUnmount() {\n        this.repeater.stop();\n    }\n\n    handleMouseOver = ({ clientX, clientY }) => {\n        const { drawMode } = this.state;\n        const { addCell, removeCell, cellSize } = this.props;\n\n        const x = Math.floor((clientX - (this.containerRef.offsetLeft + this.containerRef.offsetWidth / 2)) / cellSize);\n        const y = Math.ceil((this.containerRef.offsetTop + this.containerRef.offsetHeight / 2 - clientY) / cellSize);\n\n        if (drawMode === DRAW_MODES.DRAW) {\n            addCell({ x, y });\n        } else if (drawMode === DRAW_MODES.CLEAR) {\n            removeCell({ x, y });\n        }\n    };\n\n    handleMouseDown = ({ clientX, clientY, button }) => {\n        switch (button) {\n            case 0:\n                this.setState(\n                    {\n                        drawMode: DRAW_MODES.DRAW,\n                    },\n                    () => {\n                        this.handleMouseOver({ clientY, clientX });\n                    },\n                );\n                break;\n            case 2:\n                this.setState(\n                    {\n                        drawMode: DRAW_MODES.CLEAR,\n                    },\n                    () => {\n                        this.handleMouseOver({ clientY, clientX });\n                    },\n                );\n                break;\n            default:\n        }\n    };\n\n    handleStopDrawing = e => {\n        this.setState({\n            drawMode: DRAW_MODES.NONE,\n        });\n    };\n\n    handleContextMenu = e => {\n        e.preventDefault();\n    };\n\n    renderContent() {\n        const { renderMode } = this.props;\n        switch (renderMode) {\n            case 'html':\n                return <SizeMe>{({ width, height }) => <DivCells width={width} height={height} />}</SizeMe>;\n            case 'canvas':\n                return <SizeMe>{({ width, height }) => <CanvasCells width={width} height={height} />}</SizeMe>;\n            default:\n        }\n    }\n\n    render() {\n        return (\n            <div\n                ref={i => {\n                    this.containerRef = i;\n                }}\n                className={styles.main}\n                onMouseMove={this.handleMouseOver}\n                onMouseDown={this.handleMouseDown}\n                onMouseUp={this.handleStopDrawing}\n                onMouseLeave={this.handleStopDrawing}\n                onContextMenu={this.handleContextMenu}\n            >\n                {this.renderContent()}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        speed: state.controls.speed,\n        renderMode: state.controls.renderMode,\n        started: state.controls.started,\n        cellSize: state.controls.cellSize,\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {\n        evaluateCells,\n        addCell,\n        removeCell,\n    },\n)(Main);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport styles from './styles.module.scss';\nimport Controls from '../Controls/Controls';\nimport Main from '../Main/Main';\n\nexport default class Root extends React.Component {\n    render() {\n        const { store } = this.props;\n        return (\n            <Provider store={store}>\n                <div className={styles.root}>\n                    <Controls />\n                    <Main />\n                </div>\n            </Provider>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './redux/store';\nimport Root from './components/Root/Root';\nimport './styles/index.scss';\nimport * as serviceWorker from './serviceWorker';\n\n// Init redux-store\nconst store = configureStore();\n\n// Mount React container\nconst target = document.querySelector('#root');\nReactDOM.render(<Root store={store} />, target);\n\nif (module.hot) {\n    module.hot.accept('./components/Root/Root', () => {\n        ReactDOM.render(<Root store={store} />, target);\n    });\n}\n\nserviceWorker.unregister();\n","export function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n"],"sourceRoot":""}